name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        dotnet-version: ['8.0.x']

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    
    - name: Install WSL (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # Enable WSL feature
        Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux -NoRestart
        
        # Download and install Debian
        Invoke-WebRequest -Uri https://aka.ms/wsl-debian-gnulinux -OutFile debian.appx -UseBasicParsing
        Add-AppxPackage .\debian.appx
        
        # Initialize WSL
        wsl --set-default-version 2
        wsl --install -d Debian --no-launch
        
        # Wait for WSL to be ready
        Start-Sleep -Seconds 10
        wsl -- echo "WSL is ready"
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore
    
    - name: Test
      run: dotnet test --no-build --verbosity normal

  publish:
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Pack
      run: dotnet pack --configuration Release BashSharp/BashSharp.csproj
    
    - name: Push to NuGet
      run: dotnet nuget push "BashSharp/bin/Release/*.nupkg" --api-key ${{secrets.NUGET_API_KEY}} --source https://api.nuget.org/v3/index.json 